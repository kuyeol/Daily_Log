1) 안녕하세요, 환영합니다. 저는 윌리엄이고, 그래프 이론에 초점을 맞춘 이 비디오 시리즈를 여러분께 선보일 수 있어서 매우 기쁩니다. [사실, 기쁩니다 ㅋㅋㅋ] 그래프 이론은 컴퓨터 과학에서 제가 가장 좋아하는 주제 중 하나입니다. 우리는 매우 멋진 알고리즘을 많이 볼 것입니다. 이 분야 전체는 정말 다양하고 실제 세계 응용 프로그램에 엄청나게 적용 가능합니다. 저는 모든 사람이 그래프 이론을 배우고, 사랑하고, 즐길 수 있어야 한다고 생각합니다.
이 첫 몇 개의 영상은 컴퓨터에서 그래프를 저장하고, 표현하고, 횡단하는 방법에 대한 주제를 소개하는 램프업 영상이 될 것입니다. 그런데, 이 시리즈 전체는 수학적 관점이 아닌 그래프 이론에 대한 컴퓨터 과학 관점을 취할 것이므로 증명 등을 다루지 않고 대신 알고리즘 구현 세부 사항과 코드를 살펴볼 것입니다.

2) 그럼 그래프 이론이란 무엇일까요? 본질적으로 그래프 이론은 일반 사람들이 네트워크라고 부르는 그래프의 속성과 응용 프로그램을 연구하는 것입니다. 이것은 매우 어려운 주제이며 이 비디오 시리즈를 통해 그래프 이론을 실제 상황에 적용하는 방법을 가르쳐 드리는 것이 저의 목표입니다.

3) 그래프는 거의 모든 문제를 표현하는 데 사용할 수 있어서 매우 흥미로운데, 그래프는 어디에나 나타나기 때문입니다. 그래프 이론 문제로 표현할 수 있는 간단한 문제는 다음과 같습니다. 이 그림의 제약 조건을 감안할 때, 각 범주에서 한 가지 품목을 선택하여 몇 가지 다른 천 세트를 만들 수 있습니까? 물론 수학만 사용하여 표현하고 해결할 수도 있지만, 그래프 이론의 장점은 노드를 사용하여 의류 품목을 표현하고 모서리를 사용하여 두 품목 간의 관계를 표현하여 문제를 시각화할 수 있다는 것입니다.

4) 또 다른 표준 그래프 이론의 예는 친구의 소셜 네트워크입니다. 그래프 표현을 통해 우리는 다음과 같은 흥미로운 질문에 답할 수 있습니다. 사람 X는 몇 명의 친구를 가지고 있습니까? 또는 사람 X와 사람 Y 사이에는 몇 도의 분리가 있습니까?

5) 이제 그래프 유형에 대해 이야기해야 합니다. 그래프 표현에는 여러 가지 유형이 있으며, 특히 프로그래밍을 하면서 특정 문제를 해결하고 싶을 때 어떤 유형의 그래프를 사용하고 있는지 인식하는 것이 중요합니다.

6) 이 첫 번째 그래프 유형은 무향 그래프로, 에지가 방향이 없는 그래프입니다. 즉, 노드 u에서 노드 v로 가는 에지가 있다면, 그것은 노드 v에서 노드 u로 가는 에지와 동일합니다.

7) 예를 들어, 다음 그래프에서 노드는 도시이고 모서리는 양방향 도로를 나타냅니다. 한 도시에서 다른 도시로 운전하면 반대 방향으로 운전하여 되돌아갈 수도 있기 때문입니다.

8) 무향 그래프와 대조적으로 방향 그래프는 때때로 디그래프라고 불립니다. 이 그래프에서, 당신은 추측했겠지만, 에지는 방향이 있습니다. 따라서 u에서 v로 가는 에지가 있다면, 노드 u에서 노드 v로만 갈 수 있고, 그 반대는 불가능합니다.

9) 이 그래프에서 노드 사이의 에지에 있는 화살촉 때문에 에지가 방향을 잡고 있음을 알 수 있습니다. 이 그래프는 서로에게 선물을 사준 사람들을 나타낼 수 있으므로 들어오는 에지는 선물을 받는 것을 나타내고 나가는 에지는 선물을 주는 것을 나타냅니다. 따라서 사람 E는 사람 D에게 선물을 사줬고, 사람 A는 자신에게 선물을 사줬고, 사람 B는 선물을 사줬고, 사람 F는 아무에게도 선물을 사주지 않았고 아무것도 받지 못했습니다(아마도 에비니저 스크루지일 겁니다).

10) 지금까지는 비가중 그래프만 보았지만, 그래프의 에지는 비용, 거리, 수량 등과 같은 임의의 값을 나타내는 특정 가중치를 포함할 수 있습니다. 가중치 그래프는 유향 그래프와 무향 그래프가 있습니다. 사이드 노드로서, 저는 보통 그래프의 에지를 삼중항(u, v, w)으로 표시하여 에지가 어디에서 오는지, 어디로 가는지, 그리고 가중치가 무엇인지를 나타냅니다. 물론, 이런 표기법을 사용하면 그래프가 유향인지 무향인지도 지정해야 합니다.

11) 다음으로, 몇 가지 특별한 유형의 그래프에 대해 이야기하고 싶습니다. 너무나 다양한 유형의 특별한 그래프가 있어서 다가올 비디오 시리즈에 가장 관련성이 높은 몇 가지만 선택할 수 있었습니다.

12) 가장 중요한 특수 그래프 유형은 확실히 트리입니다. 트리는 단순히 사이클이 없는 무향 그래프이며, 트리가 무엇인지에 대한 여러 가지 동등한 정의가 있습니다. 또 다른 것은 N개의 노드와 N-1개의 에지가 있는 그래프입니다. 아래의 모든 그래프는 트리이며, 사이클이 없기 때문에 가장 왼쪽의 그래프도 그렇습니다.

13) 관련이 있지만 완전히 다른 유형의 그래프는 루트 트리입니다. 여기서의 차이점은 루트 트리는 지정된 루트 노드가 있으며 모든 모서리가 루트 노드에서 멀어지거나 루트 노드를 향한다는 것입니다. 모서리가 루트에서 멀어지면 그래프를 수목형 또는 아웃 트리라고 하며 그렇지 않으면 반수목형 또는 인 트리라고 합니다. 제가 관찰한 바에 따르면 아웃 트리는 인 트리보다 훨씬 더 일반적입니다. 또한 사람들이 루트 트리를 인 트리 또는 아웃 트리 대신 단순히 트리라고 부르는 것도 꽤 흔하지만 중요한 차이점이 있습니다.

14) 다음은 방향성 비순환 그래프입니다. 이는 방향성 에지가 있고 사이클이 없는 그래프입니다. 이러한 그래프는 스케줄러, 빌드 시스템, 컴파일러 또는 아마도 더 관련성 있는 대학 수업 전제 조건과 같은 종속성이 있는 구조를 나타내기 때문에 컴퓨터 과학에서 매우 중요하고 꽤 일반적입니다. 우리가 살펴볼 몇 가지 효율적인 알고리즘은 방향성 순환 그래프를 특별히 다루는데, 예를 들어 최단 경로를 찾고 노드의 위상적 순서를 생성하는 방법입니다. 위상적 순서는 노드의 순서로, 모든 종속성을 완료하기 전에 작업을 수행하지 않도록 그래프의 노드를 처리하는 방법을 알려줍니다. 예를 들어, 수업 전제 조건의 위상적 순서는 유전체학 수업을 듣기 전에 생물학 입문과 화학 입문을 수강하라고 알려줍니다.

15) 다음 유형의 특수 그래프는 이분 그래프로, 정점을 두 개의 독립적인 그룹 U와 V로 분할하여 모든 모서리가 U와 V 사이에 연결될 수 있는 그래프입니다. 이는 그래프가 두 가지 색상이 있거나 홀수 길이의 사이클이 없다는 것을 멋지게 표현한 것입니다. 종종 우리가 궁금해하는 문제는 이분 그래프에서 만들 수 있는 최대 매칭이 무엇인가입니다. 흰색 노드가 직업이고 빨간색 노드가 사람이라고 가정하면 얼마나 많은 사람을 직업에 매칭할 수 있을까요? 이 경우 각 그래프에 모서리가 많으므로 답은 4개라고 생각하지만 일반적으로 모서리가 적고 제약이 더 강하고 충돌이 많으면 그렇게 쉽지 않습니다. 이분 그래프는 나중에 이야기할 네트워크 흐름 분야에서도 중요한 역할을 합니다.

16) 이 마지막 유형의 그래프는 완전 그래프입니다. 그래프의 모든 노드 쌍 사이에 고유한 모서리가 있는 그래프입니다. 정점이 n개인 완전 그래프는 그래프 K sub n으로 표시됩니다. 아래에 K1~6을 나열했고 노드를 더 추가함에 따라 이것이 어떻게 확장되는지 쉽게 볼 수 있습니다. 완전 그래프는 모서리의 수 때문에 발생할 수 있는 최악의 그래프로 간주되는 경우가 많습니다. 따라서 알고리즘의 성능을 테스트하려면 완전 그래프가 시작하기 쉬운 방법입니다.

17) 우리가 정말 잘 알아야 할 한 가지는 우리가 실제로 컴퓨터에서 그래프를 어떻게 표현하는가입니다. 이는 그래프의 유형뿐만 아니라 그래프가 어떤 유형의 데이터 구조로 표현되는가에 대한 문제이며, 이는 성능에 큰 영향을 미칩니다.

18) 가장 간단한 방법은 2D 인접 행렬 내부입니다. 이 아이디어는 셀 mij가 노드 i에서 노드 j로 이동하는 에지 가중치를 나타낸다는 것입니다. 따라서 아래 그래프에는 4개의 노드가 있으므로 4x4 행렬을 만들고 그래프를 모든 에지 가중치로 채웁니다. 노드 C에서 노드 D로 가는 에지 가중치를 보면 에지 가중치가 2이므로 행 3, 열 4에 값 ​​2가 있습니다. 노드에서 자체로 이동하는 에지의 비용이 0이라고 가정하는 경우가 많기 때문에 행렬 대각선이 모두 0 값을 갖는 것입니다.

19) 이 매트릭스는 여러 가지 장점을 가지고 있습니다:
- 첫째, 밀도가 높은 그래프에 공간 효율성이 뛰어납니다.
- 에지 가중치 조회가 상수 시간이어서 좋습니다.
- 마지막으로 이것이 가장 간단한 그래프 표현이라고 주장하고 싶습니다.
그러나 단점은 사람들이 인접 행렬을 첫 번째 선택으로 선택하지 않는 주된 이유는 다음과 같습니다.
- V 제곱 공간이 필요합니다. 이는 많은 공간입니다. 실제로 10000개 이상의 노드가 있는 그래프는 빠르게 실행 불가능해지기 시작합니다.
- 인접 행렬의 또 다른 문제는 그래프의 모든 모서리를 반복하려면 V 제곱 작업이 필요하다는 것입니다. 이는 모서리가 많은 밀집 그래프에는 괜찮지만 대부분 셀이 비어 있기 때문에 희소 그래프에는 좋지 않습니다.

20) 인접 행렬의 주요 대안은 인접 리스트로, 그래프를 노드 맵에서 에지 리스트로 표현하는 방법입니다. 각 노드가 나가는 모든 에지를 추적한다는 아이디어입니다.

21) 예를 들어, 노드 C에는 3개의 나가는 에지가 있으므로 C에 대한 맵 항목에서 비용 4인 C에서 A로 가는 에지, 비용 1인 C에서 B로 가는 에지, 비용 2인 C에서 D로 가는 에지를 추적합니다. 에지 목록에서 두 가지 사항만 추적하면 된다는 점에 유의하세요. 이동하려는 노드와 거기까지 가는 비용입니다. 어디에서 왔는지는 암묵적으로 알려져 있으므로 추적할 필요가 없습니다.

22) 인접 리스트의 좋은 점은 희소 그래프에 좋다는 것입니다. 왜냐하면 그것은 당신이 가진 에지만 추적하고 인접 행렬처럼 사용하지 않을 수 있는 추가 메모리를 할당하지 않기 때문입니다. 이것은 또한 모든 에지에 대해 반복할 때 효율적이라는 것을 의미합니다.
인접 리스트를 사용하는 것의 주요 단점은 더 조밀한 그래프에서는 덜 효율적이라는 것입니다. 또 다른 미묘한 단점은 특정 에지의 가중치에 접근하는 데 큰 E 시간이 걸린다는 것입니다. 실제로는 거의 또는 전혀 필요하지 않지만요.

23) 제가 이야기하고자 하는 마지막 표현은 에지 리스트입니다. 에지 리스트는 그래프를 단순히 에지의 순서 없는 리스트로 표현하는 방법입니다. 기본적으로 그것은 말 그대로 에지의 리스트입니다. 모든 트리플렛(u,v,w)에 대한 표기법이 "노드 u에서 노드 v까지의 비용은 w"를 의미한다고 가정합니다. 따라서 이 그래프의 경우 에지 리스트는 단순히 트리플렛으로 표현된 6개의 에지의 리스트입니다. 이 표현은 매우 간단하지만 구조가 부족하기 때문에 거의 사용되지 않습니다.

24) 에지 리스트의 장점은 희소 그래프에 좋고, 모든 에지를 반복하는 것이 매우 쉽고, 구조가 간단하다는 것입니다. 단점으로는 에지 조회 시간과 큰 그래프에서의 메모리 문제가 있습니다.
